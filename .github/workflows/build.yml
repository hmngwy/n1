name: ZMK Build + Bundle

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    uses: zmkfirmware/zmk/.github/workflows/build-user-config.yml@main

  package-bundles:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        layout: [qwerty, colemak, dvorak]
        split:  [duo, trio]

    steps:
      - name: Prepare dirs
        run: |
          set -euo pipefail
          mkdir -p dl firmware work bundle

      - name: Download merged firmware artifact(s)
        uses: actions/download-artifact@v4
        with:
          pattern: firmware*
          path: dl
          merge-multiple: true

      - name: Inspect downloaded payload
        shell: bash
        run: |
          set -euo pipefail
          echo "::group::Downloaded tree"
          ls -lah dl || true
          if command -v tree >/dev/null 2>&1; then tree -a dl || true; fi
          echo "::endgroup::"

      - name: Extract all archives and collect UF2s
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          mkdir -p work firmware

          # Unzip all zips
          for z in dl/*.zip dl/**/*.zip; do
            echo "Unzipping: $z"
            unzip -q "$z" -d work
          done

          # Collect tars
          mkdir -p work/tars
          find dl work -type f -name '*.tar.gz' -print -exec mv -f {} work/tars/ \;

          # Untar them
          mkdir -p work/out
          for t in work/tars/*.tar.gz; do
            echo "Untarring: $t"
            tar -xzf "$t" -C work/out
          done

          # Collect UF2s from anywhere
          mapfile -t uf2s < <(find dl work -type f -name '*.uf2')
          if [[ ${#uf2s[@]} -eq 0 ]]; then
            echo "No UF2 files found after extraction."
            echo "::group::Post-extraction tree"
            if command -v tree >/dev/null 2>&1; then tree -a dl work || true; else ls -lahR dl work || true; fi
            echo "::endgroup::"
            exit 1
          fi

          echo "Collecting ${#uf2s[@]} UF2 file(s) into firmware/:"
          for f in "${uf2s[@]}"; do
            echo "  - $(basename "$f")"
            cp -f "$f" firmware/
          done

          echo "::group::Firmware dir contents"
          ls -lah firmware
          echo "::endgroup::"

      - name: Compute names for this bundle
        id: names
        shell: bash
        run: |
          set -euo pipefail
          L="${{ matrix.layout }}"
          S="${{ matrix.split }}"
          echo "reset=_reset" >> "$GITHUB_OUTPUT"
          echo "right=any_right_peripheral" >> "$GITHUB_OUTPUT"
          if [[ "$S" == "duo" ]]; then
            echo "central=${L}_duo_split_left" >> "$GITHUB_OUTPUT"
            echo "left=" >> "$GITHUB_OUTPUT"
          else
            echo "central=${L}_trio_split_central" >> "$GITHUB_OUTPUT"
            echo "left=${L}_trio_split_left"     >> "$GITHUB_OUTPUT"
          fi

      - name: Verify required UF2s exist
        shell: bash
        run: |
          set -euo pipefail
          miss=0
          need=( "${{ steps.names.outputs.central }}" "${{ steps.names.outputs.right }}" "${{ steps.names.outputs.reset }}" )
          if [[ -n "${{ steps.names.outputs.left }}" ]]; then
            need+=( "${{ steps.names.outputs.left }}" )
          fi
          for n in "${need[@]}"; do
            if [[ ! -f "firmware/${n}.uf2" ]]; then
              echo "Missing firmware/${n}.uf2"
              miss=1
            fi
          done
          if [[ $miss -ne 0 ]]; then
            echo "One or more required firmware files are missing. Check your build include: artifact-name values."
            exit 1
          fi

      - name: Build combined bundle
        shell: bash
        run: |
          set -euo pipefail
          rm -rf bundle && mkdir -p bundle/central bundle/right bundle/reset
          [[ -n "${{ steps.names.outputs.left }}" ]] && mkdir -p bundle/left

          cp "firmware/${{ steps.names.outputs.central }}.uf2" bundle/central/
          if [[ -n "${{ steps.names.outputs.left }}" ]]; then
            cp "firmware/${{ steps.names.outputs.left }}.uf2"    bundle/left/
          fi
          cp "firmware/${{ steps.names.outputs.right }}.uf2"   bundle/right/
          cp "firmware/${{ steps.names.outputs.reset }}.uf2"   bundle/reset/

          {
            echo "Bundle: ${{ matrix.layout }} ${{ matrix.split }}"
            echo "Contents:"
            echo "- central/: firmware for central controller"
            if [[ -n "${{ steps.names.outputs.left }}" ]]; then
              echo "- left/:    (trio only) left peripheral firmware"
            fi
            echo "- right/:   shared right peripheral firmware"
            echo "- reset/:   settings_reset UF2"
          } > bundle/README.txt

          OUT="${{ matrix.layout }}_${{ matrix.split }}.tar.gz"
          tar -czf "$OUT" -C bundle .
          echo "OUT=$OUT" >> "$GITHUB_ENV"
          echo "Wrote $OUT"

      - name: Upload bundle
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.layout }}_${{ matrix.split }}
          path: ${{ env.OUT }}

